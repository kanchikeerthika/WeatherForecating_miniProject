import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
# Replace 'weather.csv' with your dataset path
data = pd.read_csv('weather.csv')

# Inspect the dataset
print(data.head())

# Preprocessing: Handle missing values and select features
data = data.dropna()
X = data[['Temperature', 'Humidity', 'WindSpeed']]  # Independent variables
y = data['WeatherCondition']  # Dependent variable (target)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression Model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

# Random Forest Regressor Model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Evaluate models
print("Linear Regression Metrics:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_lr)}")
print(f"R^2 Score: {r2_score(y_test, y_pred_lr)}")

print("\nRandom Forest Metrics:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_rf)}")
print(f"R^2 Score: {r2_score(y_test, y_pred_rf)}")

# Plot results for visualization
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual', color='blue', linestyle='dashed')
plt.plot(y_pred_rf, label='Random Forest Prediction', color='green')
plt.plot(y_pred_lr, label='Linear Regression Prediction', color='red')
plt.legend()
plt.title('Weather Prediction')
plt.xlabel('Samples')
plt.ylabel('Weather Condition')
plt.show()
